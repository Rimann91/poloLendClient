#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.12
# In conjunction with Tcl version 8.6
#    Apr 21, 2018 10:37:09 PM

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import poloLendUi_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    poloLendUi_support.set_Tk_var()
    top = MainWindow (root)
    poloLendUi_support.init(root, top)
    root.mainloop()

w = None
def create_MainWindow(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    poloLendUi_support.set_Tk_var()
    top = MainWindow (w)
    poloLendUi_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_MainWindow():
    global w
    w.destroy()
    w = None


class MainWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {DejaVu Sans Mono} -size 0 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font11 = "-family {DejaVu Sans} -size 12 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font12 = "-family Dingbats -size 14 -weight bold -slant italic"  \
            " -underline 0 -overstrike 0"
        font9 = "-family {DejaVu Sans} -size 0 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("700x729+402+17")
        top.title("MainWindow")
        top.configure(highlightbackground="#495b51")
        top.configure(highlightcolor="white")



        self.TFrame1 = ttk.Frame(top)
        self.TFrame1.place(relx=0.01, rely=0.07, relheight=0.23, relwidth=0.97)
        self.TFrame1.configure(relief=GROOVE)
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief=GROOVE)
        self.TFrame1.configure(width=680)

        self.LoanOfferView = ScrolledText(self.TFrame1)
        self.LoanOfferView.place(relx=0.0, rely=0.25, relheight=0.74
                , relwidth=0.48)
        self.LoanOfferView.configure(background="white")
        self.LoanOfferView.configure(font=font9)
        self.LoanOfferView.configure(insertborderwidth="3")
        self.LoanOfferView.configure(selectbackground="#c4c474")
        self.LoanOfferView.configure(width=10)
        self.LoanOfferView.configure(wrap=NONE)

        self.LoanDemandView = ScrolledText(self.TFrame1)
        self.LoanDemandView.place(relx=0.51, rely=0.25, relheight=0.74
                , relwidth=0.48)
        self.LoanDemandView.configure(background="white")
        self.LoanDemandView.configure(font=font9)
        self.LoanDemandView.configure(insertborderwidth="3")
        self.LoanDemandView.configure(selectbackground="#c4c474")
        self.LoanDemandView.configure(width=10)
        self.LoanDemandView.configure(wrap=NONE)

        self.LabelOfferView = ttk.Label(self.TFrame1)
        self.LabelOfferView.place(relx=0.19, rely=0.0, height=15, width=48)
        self.LabelOfferView.configure(background="#d9d9d9")
        self.LabelOfferView.configure(foreground="#000000")
        self.LabelOfferView.configure(font=font12)
        self.LabelOfferView.configure(relief=FLAT)
        self.LabelOfferView.configure(text='''Offers''')

        self.LabelDemandView = ttk.Label(self.TFrame1)
        self.LabelDemandView.place(relx=0.71, rely=0.0, height=15, width=71)
        self.LabelDemandView.configure(background="#d9d9d9")
        self.LabelDemandView.configure(foreground="#000000")
        self.LabelDemandView.configure(font=font12)
        self.LabelDemandView.configure(relief=FLAT)
        self.LabelDemandView.configure(text='''Demands''')

        self.frameActiveOrders = ttk.Frame(top)
        self.frameActiveOrders.place(relx=0.01, rely=0.32, relheight=0.32
                , relwidth=0.97)
        self.frameActiveOrders.configure(relief=GROOVE)
        self.frameActiveOrders.configure(borderwidth="2")
        self.frameActiveOrders.configure(relief=GROOVE)
        self.frameActiveOrders.configure(width=680)

        self.listBoxActiveLoanDemands = ScrolledListBox(self.frameActiveOrders)
        self.listBoxActiveLoanDemands.place(relx=0.0, rely=0.39, relheight=0.59
                , relwidth=0.99)
        self.listBoxActiveLoanDemands.configure(background="white")
        self.listBoxActiveLoanDemands.configure(font=font10)
        self.listBoxActiveLoanDemands.configure(highlightcolor="#d9d9d9")
        self.listBoxActiveLoanDemands.configure(selectbackground="#c4c4c4")
        self.listBoxActiveLoanDemands.configure(width=10)

        self.labelMyActiveOffers = ttk.Label(self.frameActiveOrders)
        self.labelMyActiveOffers.place(relx=0.01, rely=0.0, height=15, width=124)

        self.labelMyActiveOffers.configure(background="#d9d9d9")
        self.labelMyActiveOffers.configure(foreground="#000000")
        self.labelMyActiveOffers.configure(font=font12)
        self.labelMyActiveOffers.configure(relief=FLAT)
        self.labelMyActiveOffers.configure(text='''My Active Offers''')

        self.labelRateActiveOffers = ttk.Label(self.frameActiveOrders)
        self.labelRateActiveOffers.place(relx=0.13, rely=0.3, height=15
                , width=28)
        self.labelRateActiveOffers.configure(background="#d9d9d9")
        self.labelRateActiveOffers.configure(foreground="#000000")
        self.labelRateActiveOffers.configure(font=font11)
        self.labelRateActiveOffers.configure(relief=FLAT)
        self.labelRateActiveOffers.configure(text='''Rate''')

        self.labelAmountActiveOffers = ttk.Label(self.frameActiveOrders)
        self.labelAmountActiveOffers.place(relx=0.29, rely=0.3, height=15
                , width=46)
        self.labelAmountActiveOffers.configure(background="#d9d9d9")
        self.labelAmountActiveOffers.configure(foreground="#000000")
        self.labelAmountActiveOffers.configure(font=font11)
        self.labelAmountActiveOffers.configure(relief=FLAT)
        self.labelAmountActiveOffers.configure(text='''Amount''')

        self.labelDurationActiveOffers = ttk.Label(self.frameActiveOrders)
        self.labelDurationActiveOffers.place(relx=0.47, rely=0.3, height=15
                , width=50)
        self.labelDurationActiveOffers.configure(background="#d9d9d9")
        self.labelDurationActiveOffers.configure(foreground="#000000")
        self.labelDurationActiveOffers.configure(font=font11)
        self.labelDurationActiveOffers.configure(relief=FLAT)
        self.labelDurationActiveOffers.configure(text='''Duration''')

        self.labelAutoRenewActiveOffers = ttk.Label(self.frameActiveOrders)
        self.labelAutoRenewActiveOffers.place(relx=0.59, rely=0.3, height=15
                , width=70)
        self.labelAutoRenewActiveOffers.configure(background="#d9d9d9")
        self.labelAutoRenewActiveOffers.configure(foreground="#000000")
        self.labelAutoRenewActiveOffers.configure(font=font11)
        self.labelAutoRenewActiveOffers.configure(relief=FLAT)
        self.labelAutoRenewActiveOffers.configure(text='''Auto Renew''')

        self.TFrame4 = ttk.Frame(self.frameActiveOrders)
        self.TFrame4.place(relx=0.01, rely=0.09, relheight=0.15, relwidth=0.96)
        self.TFrame4.configure(relief=GROOVE)
        self.TFrame4.configure(borderwidth="2")
        self.TFrame4.configure(relief=GROOVE)
        self.TFrame4.configure(width=655)

        self.labelInputRate = ttk.Label(self.TFrame4)
        self.labelInputRate.place(relx=0.02, rely=0.29, height=16, width=33)
        self.labelInputRate.configure(background="#d9d9d9")
        self.labelInputRate.configure(foreground="#000000")
        self.labelInputRate.configure(font="TkDefaultFont")
        self.labelInputRate.configure(relief=FLAT)
        self.labelInputRate.configure(text='''Rate:''')

        self.labelInputAmount = ttk.Label(self.TFrame4)
        self.labelInputAmount.place(relx=0.2, rely=0.29, height=16, width=54)
        self.labelInputAmount.configure(background="#d9d9d9")
        self.labelInputAmount.configure(foreground="#000000")
        self.labelInputAmount.configure(font="TkDefaultFont")
        self.labelInputAmount.configure(relief=FLAT)
        self.labelInputAmount.configure(text='''Amount:''')

        self.labelInputDuration = ttk.Label(self.TFrame4)
        self.labelInputDuration.place(relx=0.49, rely=0.29, height=16, width=58)
        self.labelInputDuration.configure(background="#d9d9d9")
        self.labelInputDuration.configure(foreground="#000000")
        self.labelInputDuration.configure(font="TkDefaultFont")
        self.labelInputDuration.configure(relief=FLAT)
        self.labelInputDuration.configure(text='''Duration:''')

        self.labelInputAutoRenew = ttk.Label(self.TFrame4)
        self.labelInputAutoRenew.place(relx=0.7, rely=0.29, height=16, width=78)
        self.labelInputAutoRenew.configure(background="#d9d9d9")
        self.labelInputAutoRenew.configure(foreground="#000000")
        self.labelInputAutoRenew.configure(font="TkDefaultFont")
        self.labelInputAutoRenew.configure(relief=FLAT)
        self.labelInputAutoRenew.configure(text='''Auto Renew:''')

        self.entryRate = ttk.Entry(self.TFrame4)
        self.entryRate.place(relx=0.08, rely=0.29, relheight=0.51, relwidth=0.1)
        self.entryRate.configure(takefocus="")
        self.entryRate.configure(cursor="xterm")

        self.entryAmount = ttk.Entry(self.TFrame4)
        self.entryAmount.place(relx=0.29, rely=0.29, relheight=0.51
                , relwidth=0.17)
        self.entryAmount.configure(takefocus="")
        self.entryAmount.configure(cursor="xterm")

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.checkButtonAutoRenew = ttk.Checkbutton(self.TFrame4)
        self.checkButtonAutoRenew.place(relx=0.82, rely=0.29, relwidth=0.03
                , relheight=0.0, height=18)
        self.checkButtonAutoRenew.configure(variable=poloLendUi_support.tch55)
        self.checkButtonAutoRenew.configure(takefocus="")

        self.comboBoxDuration = ttk.Combobox(self.TFrame4)
        self.comboBoxDuration.place(relx=0.58, rely=0.29, relheight=0.51
                , relwidth=0.1)
        self.value_list = [2,7,14,30,60,]
        self.comboBoxDuration.configure(values=self.value_list)
        self.comboBoxDuration.configure(textvariable=poloLendUi_support.combobox)
        self.comboBoxDuration.configure(takefocus="")

        self.buttonSubmitOffer = ttk.Button(self.TFrame4)
        self.buttonSubmitOffer.place(relx=0.89, rely=0.14, height=25, width=63)
        self.buttonSubmitOffer.configure(command=lambda :poloLendUi_support.createLoanOffer())
        self.buttonSubmitOffer.configure(takefocus="")
        self.buttonSubmitOffer.configure(text='''offer''')

        self.labelDateActive = ttk.Label(self.frameActiveOrders)
        self.labelDateActive.place(relx=0.75, rely=0.3, height=15, width=28)
        self.labelDateActive.configure(background="#d9d9d9")
        self.labelDateActive.configure(foreground="#000000")
        self.labelDateActive.configure(font=font11)
        self.labelDateActive.configure(relief=FLAT)
        self.labelDateActive.configure(text='''Date''')

        self.buttonCancelOffer = ttk.Button(self.frameActiveOrders)
        self.buttonCancelOffer.place(relx=0.87, rely=0.26, height=25, width=63)
        self.buttonCancelOffer.configure(command=lambda :poloLendUi_support.cancelLoanOffer())
        self.buttonCancelOffer.configure(takefocus="")
        self.buttonCancelOffer.configure(text='''cancel''')
        self.buttonCancelOffer.configure(width=63)

        self.framActiveLoans = ttk.Frame(top)
        self.framActiveLoans.place(relx=0.01, rely=0.64, relheight=0.3
                , relwidth=0.97)
        self.framActiveLoans.configure(relief=GROOVE)
        self.framActiveLoans.configure(borderwidth="2")
        self.framActiveLoans.configure(relief=GROOVE)
        self.framActiveLoans.configure(width=680)

        self.listBoxActiveLoans = ScrolledListBox(self.framActiveLoans)
        self.listBoxActiveLoans.place(relx=0.0, rely=0.14, relheight=0.66
                , relwidth=0.99)
        self.listBoxActiveLoans.configure(background="white")
        self.listBoxActiveLoans.configure(font=font10)
        self.listBoxActiveLoans.configure(highlightcolor="#d9d9d9")
        self.listBoxActiveLoans.configure(selectbackground="#c4c4c4")
        self.listBoxActiveLoans.configure(width=10)

        self.TLabel2 = ttk.Label(self.framActiveLoans)
        self.TLabel2.place(relx=0.01, rely=0.0, height=15, width=95)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font=font12)
        self.TLabel2.configure(relief=FLAT)
        self.TLabel2.configure(text='''Active Loans''')

        self.textBoxTotals = Text(self.framActiveLoans)
        self.textBoxTotals.place(relx=0.19, rely=0.86, relheight=0.08
                , relwidth=0.6)
        self.textBoxTotals.configure(background="white")
        self.textBoxTotals.configure(font=font9)
        self.textBoxTotals.configure(selectbackground="#c4c4c4")
        self.textBoxTotals.configure(width=406)
        self.textBoxTotals.configure(wrap=WORD)

        self.progressBar = ttk.Progressbar(top)
        self.progressBar.place(relx=0.84, rely=0.96, relwidth=0.13, relheight=0.0
                , height=19)
        self.progressBar.configure(length="90")
        self.progressBar.configure(mode="indeterminate")

        self.progressLabel = ttk.Label(top)
        self.progressLabel.place(relx=0.64, rely=0.96, height=16, width=2)
        self.progressLabel.configure(background="#d9d9d9")
        self.progressLabel.configure(foreground="#000000")
        self.progressLabel.configure(font="TkDefaultFont")
        self.progressLabel.configure(relief=FLAT)
        self.progressLabel.configure(justify=RIGHT)

        self.menubar = Menu(top,font=font9,bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)







# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



