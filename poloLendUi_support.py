#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Apr 08, 2018 03:47:17 PM
#    Apr 11, 2018 12:22:03 PM

# TODO: 
# [] add asyncio module and make all calls to Poloniex module asyncronous
# [] Create cancel loan offer button
# [] toggle for autoRenew for active offers
# [] status bar

# STANDARD IMPORTS
import sys
import asyncio
import queue
import threading

# LOCAL MODULES
import config
from viewModel import DataDisplay
from dataModel import PoloniexWrap


try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

gui_queue = queue.Queue()

def set_Tk_var():
    global tch55
    tch55 = StringVar()
    global combobox
    combobox = StringVar()

def init(top, gui, *args, **kwargs):
    """ Everything inside of the tkinter main event loop """

    global w, top_level, root, dd
    key = config.API_KEY
    secret = config.API_SECRET
    dd = DataDisplay(key, secret)
    w = gui
    top_level = top
    root = top
    allUpdates()
    periodicGuiUpdate()

    #populateActiveTotals()

def destroy_window():
    """ Function which closes the window. """

    global top_level
    top_level.destroy()
    top_level = None


def populateActiveOffers():
    """ Populates and updates active offer display """

    w.listBoxActiveLoanDemands.delete(0, END)
    activeOffers = dd.activeoffers()

    for i in activeOffers:
        w.listBoxActiveLoanDemands.insert(END, i['display'])

    dd.activeOffers = activeOffers
    root.after(10000, populateActiveOffers)

def populateActiveLoans():
    """ Populates and update active loan display"""

    w.listBoxActiveLoans.delete(0, END)
    activeLoans = dd.activeLoans()

    for i in activeLoans:
        w.listBoxActiveLoans.insert(END, i['display'])


    root.after(10000, populateActiveLoans)

def createLoanOffer():
    """ Create a new Loan Offer"""

    #message = "Submitting Offer"
    #progressBarStart(message)
    currency = 'BTC'
    amount = w.entryAmount.get()
    rate = w.entryRate.get()
    autoRenew = tch55.get()
    duration = w.comboBoxDuration.get()

    dd.createOffer(currency, rate, amount, duration, autoRenew)

    populateActiveOffers()
    #w.progressBar.stop()

def cancelLoanOffer():
    """ cancels selected offer in offer list box """

    #w.progressBar.start()
    offer = w.listBoxActiveLoanDemands.curselection()
    offerId = dd.activeOffers[int(offer[0])]['id']
    dd.cancelOffer(offerId)
    #w.progressBar.stop()

def populateActiveTotals():
    """ populate and update Active totals"""

    total = dd.activeTotals()
    w.textBoxTotals.insert(END, total)

async def updateLoans():
    """ populates and updates offered and demanded loan display """

    while True:
        offers = await dd.loanOffers()
        demands = await dd.loanDemands()

        print('loans obtained')
        gui_queue.put(lambda: updateLoansGui(offers, demands))
        await asyncio.sleep(10)

def updateLoansGui(offers, demands):
    w.LoanOfferView.delete(1.0, END)
    w.LoanDemandView.delete(1.0, END)
    w.LoanOfferView.insert(END, offers)
    w.LoanDemandView.insert(END, demands)

def periodicGuiUpdate():
    while True:
        try:
            fn = gui_queue.get_nowait()
        except queue.Empty:
            break
        fn()
    root.after(100, periodicGuiUpdate)

def asyncioLoop():
    """ The main asyncio loop that runs in a second thread .
    handles all asyncronous requests to Poloniex API
    """

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(updateLoans())
    loop.run_forever()

def allUpdates():
    """ Runs all display updates"""

    # Thread needs a way to stop loop and die
    # currently keeps running even after window is killed
    threading.Thread(target=asyncioLoop).start()

    # Private calls to Poloniex API that need to be made asyncronous
    # Having trouble sending keys to poloniex correctly so using
    # third party syncronous poloniex wrapper for time being
    populateActiveOffers()
    populateActiveLoans()

def progressBarStart(message):
    """Loading Progress bar for status bar
    TODO: configure label depending on what is being loaded,
    hide/unhide the widget, start the widget"""

    w.progressLabel.config(text=message)
    w.progressBar.start()

if __name__ == '__main__':
    import poloLendUi
    poloLendUi.vp_start_gui()




